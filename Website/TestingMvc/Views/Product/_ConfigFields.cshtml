@model TestingMvc.ConfigFieldVM

<fieldset id="addConfigFieldTab">
    <legend>Product Configuration Properties</legend>
    <div class="row">
    	@using (Html.BeginForm("AddConfigField", "Product", FormMethod.Post, new { 
			id="addConfigFieldForm"
		})) 
		{
			@Html.HiddenFor(m => m.ProductID)
	        <div class="small-12 large-4 columns">
	            <label>Config Property Name
	            	@Html.TextBoxFor(m => m.Name, new { id="fieldname" })
	            </label>
				@Html.ValidationMessageFor(m => m.Name)
	        </div>
	        <div class="small-12 large-4 columns">
	            <label>Property Type
	            	@Html.DropDownListFor(m => m.Type, Model.ConfigFieldTypes, new { id="configfieldtypes" }) 
	            </label>
	        </div>
	        <div class="small-12 large-4 columns">
	        	<input type="submit" class="button small left" id="addconfigfield" value="Add" />                         
	        </div>
		}
    </div>
    <div class="row">
        <div class="small-8 columns end">
    	    @if (!ViewData.ModelState.IsValidField("General"))
			{
				<span>@ViewData.ModelState["General"].Value.ToString()</span>
			}
            <table data-remove='@Url.Action("RemoveConfigField", "Product")'>
            	<tr>
            		<th>Config Field</th>
            		<th>Type</th>
            		<th>&nbsp;</th>
            	</tr>
				@foreach (var kvp in Model.ConfigFields)
				{
				<tr>
					<td>@kvp.Key</td>
					<td>@kvp.Value</td>
					<td><a class="button small right removeFieldButton" data-for="@kvp.Key" href="#">Remove</a></td>
				</tr>
				}
            </table>
        </div>
    </div>
</fieldset>